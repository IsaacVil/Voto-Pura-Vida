
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.10.0
 * Query Engine version: aee10d5a411e4360c6d3445ce4810ca65adbf3e8
 */
Prisma.prismaVersion = {
  client: "6.10.0",
  engine: "aee10d5a411e4360c6d3445ce4810ca65adbf3e8"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable',
  Snapshot: 'Snapshot'
});

exports.Prisma.Flyway_schema_historyScalarFieldEnum = {
  installed_rank: 'installed_rank',
  version: 'version',
  description: 'description',
  type: 'type',
  script: 'script',
  checksum: 'checksum',
  installed_by: 'installed_by',
  installed_on: 'installed_on',
  execution_time: 'execution_time',
  success: 'success'
};

exports.Prisma.PV_AddressesScalarFieldEnum = {
  addressid: 'addressid',
  line1: 'line1',
  line2: 'line2',
  zipcode: 'zipcode',
  cityid: 'cityid'
};

exports.Prisma.PV_AIAnalysisTypeScalarFieldEnum = {
  analysisTypeId: 'analysisTypeId',
  name: 'name'
};

exports.Prisma.PV_AIConnectionsScalarFieldEnum = {
  connectionid: 'connectionid',
  providerid: 'providerid',
  connectionname: 'connectionname',
  publicKey: 'publicKey',
  privateKey: 'privateKey',
  organizationid: 'organizationid',
  projectid: 'projectid',
  region: 'region',
  environment: 'environment',
  isactive: 'isactive',
  createdby: 'createdby',
  createdate: 'createdate',
  lastused: 'lastused',
  usagecount: 'usagecount',
  modelId: 'modelId'
};

exports.Prisma.PV_AIDocumentAnalysisScalarFieldEnum = {
  analysisid: 'analysisid',
  documentid: 'documentid',
  analysisDocTypeId: 'analysisDocTypeId',
  confidence: 'confidence',
  result: 'result',
  findings: 'findings',
  extracteddata: 'extracteddata',
  flags: 'flags',
  humanreviewrequired: 'humanreviewrequired',
  reviewerid: 'reviewerid',
  reviewdate: 'reviewdate',
  reviewcomments: 'reviewcomments',
  finalresult: 'finalresult',
  analysisdate: 'analysisdate',
  workflowId: 'workflowId',
  AIConnectionId: 'AIConnectionId'
};

exports.Prisma.PV_AIModelsScalarFieldEnum = {
  modelid: 'modelid',
  providerid: 'providerid',
  modelname: 'modelname',
  displayname: 'displayname',
  modeltypeId: 'modeltypeId',
  maxinputtokens: 'maxinputtokens',
  maxoutputtokens: 'maxoutputtokens',
  costperinputtoken: 'costperinputtoken',
  costperoutputtoken: 'costperoutputtoken',
  isactive: 'isactive',
  capabilities: 'capabilities',
  createdate: 'createdate'
};

exports.Prisma.PV_AIModelTypesScalarFieldEnum = {
  AIModelId: 'AIModelId',
  name: 'name'
};

exports.Prisma.PV_AIProposalAnalysisScalarFieldEnum = {
  analysisid: 'analysisid',
  proposalid: 'proposalid',
  analysistype: 'analysistype',
  confidence: 'confidence',
  findings: 'findings',
  recommendations: 'recommendations',
  riskfactors: 'riskfactors',
  complianceissues: 'complianceissues',
  budgetanalysis: 'budgetanalysis',
  marketanalysis: 'marketanalysis',
  humanreviewrequired: 'humanreviewrequired',
  reviewerid: 'reviewerid',
  reviewdate: 'reviewdate',
  reviewcomments: 'reviewcomments',
  analysisdate: 'analysisdate',
  workflowId: 'workflowId',
  AIConnectionId: 'AIConnectionId'
};

exports.Prisma.PV_AIProvidersScalarFieldEnum = {
  providerid: 'providerid',
  name: 'name',
  baseurl: 'baseurl',
  description: 'description',
  isactive: 'isactive',
  ratelimitrpm: 'ratelimitrpm',
  ratelimittpm: 'ratelimittpm',
  supportedmodels: 'supportedmodels',
  createdate: 'createdate'
};

exports.Prisma.PV_AllowedCountriesScalarFieldEnum = {
  allowedcountryid: 'allowedcountryid',
  countryid: 'countryid',
  isallowed: 'isallowed',
  createddate: 'createddate',
  lastmodified: 'lastmodified'
};

exports.Prisma.PV_AllowedIPsScalarFieldEnum = {
  allowedipid: 'allowedipid',
  ipaddress: 'ipaddress',
  ipmask: 'ipmask',
  addressid: 'addressid',
  isallowed: 'isallowed',
  description: 'description',
  createddate: 'createddate',
  lastmodified: 'lastmodified',
  checksum: 'checksum'
};

exports.Prisma.PV_AuthPlatformsScalarFieldEnum = {
  authPlatformId: 'authPlatformId',
  name: 'name',
  secretKey: 'secretKey',
  key: 'key',
  iconURL: 'iconURL'
};

exports.Prisma.PV_authSessionScalarFieldEnum = {
  AuthsessionId: 'AuthsessionId',
  sessionId: 'sessionId',
  externalUser: 'externalUser',
  token: 'token',
  refreshToken: 'refreshToken',
  userId: 'userId',
  authPlatformId: 'authPlatformId'
};

exports.Prisma.PV_AvailableMethodsScalarFieldEnum = {
  availablemethodid: 'availablemethodid',
  name: 'name',
  token: 'token',
  exptokendate: 'exptokendate',
  maskaccount: 'maskaccount',
  userid: 'userid',
  paymentmethodid: 'paymentmethodid'
};

exports.Prisma.PV_BalancesScalarFieldEnum = {
  balanceid: 'balanceid',
  balance: 'balance',
  lastbalance: 'lastbalance',
  lastupdate: 'lastupdate',
  checksum: 'checksum',
  freezeamount: 'freezeamount',
  userid: 'userid',
  fundid: 'fundid',
  organizationId: 'organizationId'
};

exports.Prisma.PV_blockchainScalarFieldEnum = {
  blockchainId: 'blockchainId',
  blockchainParamsId: 'blockchainParamsId',
  createdDate: 'createdDate',
  updateDate: 'updateDate'
};

exports.Prisma.PV_BlockChainConnectionsScalarFieldEnum = {
  connectionId: 'connectionId',
  blockchainId: 'blockchainId',
  workflowId: 'workflowId'
};

exports.Prisma.PV_BlockchainParamsScalarFieldEnum = {
  blockChainParamsId: 'blockChainParamsId',
  wallet_address: 'wallet_address',
  wallet_private_key_encrypted: 'wallet_private_key_encrypted',
  wallet_public: 'wallet_public',
  blockchain_network: 'blockchain_network',
  blockchain_rpc_url: 'blockchain_rpc_url',
  blockchain_chain_id: 'blockchain_chain_id',
  blockchain_explorer_url: 'blockchain_explorer_url',
  gas_price_default: 'gas_price_default',
  gas_limit_default: 'gas_limit_default',
  gas_currency: 'gas_currency'
};

exports.Prisma.PV_CitiesScalarFieldEnum = {
  cityid: 'cityid',
  name: 'name',
  stateid: 'stateid'
};

exports.Prisma.PV_CountriesScalarFieldEnum = {
  countryid: 'countryid',
  name: 'name',
  languageid: 'languageid',
  currencyid: 'currencyid'
};

exports.Prisma.PV_CryptoKeysScalarFieldEnum = {
  keyid: 'keyid',
  encryptedpublickey: 'encryptedpublickey',
  encryptedprivatekey: 'encryptedprivatekey',
  createdAt: 'createdAt',
  userid: 'userid',
  organizationid: 'organizationid',
  expirationdate: 'expirationdate',
  status: 'status'
};

exports.Prisma.PV_CurrencyScalarFieldEnum = {
  currencyid: 'currencyid',
  name: 'name',
  symbol: 'symbol',
  acronym: 'acronym'
};

exports.Prisma.PV_DocumentsScalarFieldEnum = {
  documentid: 'documentid',
  documenthash: 'documenthash',
  aivalidationstatus: 'aivalidationstatus',
  aivalidationresult: 'aivalidationresult',
  humanvalidationrequired: 'humanvalidationrequired',
  mediafileId: 'mediafileId',
  periodicVerificationId: 'periodicVerificationId',
  documentTypeId: 'documentTypeId',
  version: 'version'
};

exports.Prisma.PV_DocumentSectionsScalarFieldEnum = {
  sectionId: 'sectionId',
  documenTypeId: 'documenTypeId',
  title: 'title',
  summary: 'summary',
  possibleFindings: 'possibleFindings',
  creationDate: 'creationDate'
};

exports.Prisma.PV_DocumentTypesScalarFieldEnum = {
  documentTypeId: 'documentTypeId',
  name: 'name',
  description: 'description',
  workflowId: 'workflowId'
};

exports.Prisma.PV_EndTypeScalarFieldEnum = {
  endtypeid: 'endtypeid',
  name: 'name'
};

exports.Prisma.PV_ExchangeRateScalarFieldEnum = {
  exchangeRateid: 'exchangeRateid',
  startDate: 'startDate',
  endDate: 'endDate',
  exchangeRate: 'exchangeRate',
  enabled: 'enabled',
  currentExchangeRate: 'currentExchangeRate',
  sourceCurrencyid: 'sourceCurrencyid',
  destinyCurrencyId: 'destinyCurrencyId'
};

exports.Prisma.PV_ExecutionPlansScalarFieldEnum = {
  executionplanid: 'executionplanid',
  proposalid: 'proposalid',
  totalbudget: 'totalbudget',
  expectedStartdate: 'expectedStartdate',
  expectedenddate: 'expectedenddate',
  createddate: 'createddate',
  expectedDurationInMonths: 'expectedDurationInMonths'
};

exports.Prisma.PV_executionPlanStepsScalarFieldEnum = {
  planStepId: 'planStepId',
  executionPlanId: 'executionPlanId',
  stepIndex: 'stepIndex',
  description: 'description',
  stepTypeId: 'stepTypeId',
  estimatedInitDate: 'estimatedInitDate',
  estimatedEndDate: 'estimatedEndDate',
  durationInMonts: 'durationInMonts',
  KPI: 'KPI',
  votingId: 'votingId'
};

exports.Prisma.PV_executionStepTypeScalarFieldEnum = {
  executionStepTypeId: 'executionStepTypeId',
  name: 'name'
};

exports.Prisma.PV_FinancialReportsScalarFieldEnum = {
  reportid: 'reportid',
  proposalid: 'proposalid',
  reportperiod: 'reportperiod',
  totalrevenue: 'totalrevenue',
  totalexpenses: 'totalexpenses',
  netprofit: 'netprofit',
  availablefordividends: 'availablefordividends',
  reportfile: 'reportfile',
  submitteddate: 'submitteddate',
  approvedby: 'approvedby',
  approveddate: 'approveddate',
  workflowId: 'workflowId',
  documentId: 'documentId'
};

exports.Prisma.PV_FundsScalarFieldEnum = {
  fundid: 'fundid',
  name: 'name'
};

exports.Prisma.PV_GendersScalarFieldEnum = {
  genderId: 'genderId',
  name: 'name'
};

exports.Prisma.PV_IdentityOrganizationValidationScalarFieldEnum = {
  orgValidationId: 'orgValidationId',
  organizationid: 'organizationid',
  validationId: 'validationId'
};

exports.Prisma.PV_IdentityUserValidationScalarFieldEnum = {
  userValidationId: 'userValidationId',
  userid: 'userid',
  validationid: 'validationid'
};

exports.Prisma.PV_IdentityValidationsScalarFieldEnum = {
  validationid: 'validationid',
  validationdate: 'validationdate',
  validationtype: 'validationtype',
  validationresult: 'validationresult',
  aivalidationresult: 'aivalidationresult',
  validationhash: 'validationhash',
  workflowId: 'workflowId',
  verified: 'verified'
};

exports.Prisma.PV_InvestmentAgreementsScalarFieldEnum = {
  agreementId: 'agreementId',
  name: 'name',
  description: 'description',
  signatureDate: 'signatureDate',
  porcentageInvested: 'porcentageInvested',
  investmentId: 'investmentId',
  documentId: 'documentId',
  organizationId: 'organizationId',
  userId: 'userId',
  checksum: 'checksum',
  proposalid: 'proposalid'
};

exports.Prisma.PV_InvestmentsScalarFieldEnum = {
  investmentid: 'investmentid',
  proposalid: 'proposalid',
  amount: 'amount',
  equitypercentage: 'equitypercentage',
  investmentdate: 'investmentdate',
  investmenthash: 'investmenthash',
  checksum: 'checksum',
  userid: 'userid'
};

exports.Prisma.PV_investmentStepsScalarFieldEnum = {
  invesmentStepId: 'invesmentStepId',
  investmentAgreementId: 'investmentAgreementId',
  stepIndex: 'stepIndex',
  description: 'description',
  amount: 'amount',
  remainingAmount: 'remainingAmount',
  estimatedDate: 'estimatedDate',
  transactionId: 'transactionId'
};

exports.Prisma.PV_LanguagesScalarFieldEnum = {
  languageid: 'languageid',
  name: 'name',
  culture: 'culture'
};

exports.Prisma.PV_LogsScalarFieldEnum = {
  logid: 'logid',
  description: 'description',
  name: 'name',
  posttime: 'posttime',
  computer: 'computer',
  trace: 'trace',
  referenceid1: 'referenceid1',
  referenceid2: 'referenceid2',
  checksum: 'checksum',
  logtypeid: 'logtypeid',
  logsourceid: 'logsourceid',
  logseverityid: 'logseverityid',
  value1: 'value1',
  value2: 'value2'
};

exports.Prisma.PV_LogSeverityScalarFieldEnum = {
  logseverityid: 'logseverityid',
  name: 'name'
};

exports.Prisma.PV_LogSourceScalarFieldEnum = {
  logsourceid: 'logsourceid',
  name: 'name'
};

exports.Prisma.PV_LogTypesScalarFieldEnum = {
  logtypeid: 'logtypeid',
  name: 'name',
  ref1description: 'ref1description',
  ref2description: 'ref2description',
  val1description: 'val1description',
  val2description: 'val2description'
};

exports.Prisma.PV_mediafilesScalarFieldEnum = {
  mediafileid: 'mediafileid',
  mediapath: 'mediapath',
  deleted: 'deleted',
  lastupdate: 'lastupdate',
  userid: 'userid',
  mediatypeid: 'mediatypeid',
  sizeMB: 'sizeMB',
  encoding: 'encoding',
  samplerate: 'samplerate',
  languagecode: 'languagecode'
};

exports.Prisma.PV_mediaTypesScalarFieldEnum = {
  mediaTypeId: 'mediaTypeId',
  name: 'name',
  playerimpl: 'playerimpl'
};

exports.Prisma.PV_MFAScalarFieldEnum = {
  MFAid: 'MFAid',
  MFAmethodid: 'MFAmethodid',
  MFA_secret: 'MFA_secret',
  createdAt: 'createdAt',
  enabled: 'enabled',
  organizationid: 'organizationid',
  userid: 'userid'
};

exports.Prisma.PV_MFAMethodsScalarFieldEnum = {
  MFAmethodid: 'MFAmethodid',
  name: 'name',
  description: 'description',
  requiressecret: 'requiressecret'
};

exports.Prisma.PV_ModulesScalarFieldEnum = {
  moduleid: 'moduleid',
  name: 'name'
};

exports.Prisma.PV_NotificationMethodsScalarFieldEnum = {
  notificationmethodid: 'notificationmethodid',
  name: 'name',
  description: 'description'
};

exports.Prisma.PV_NotificationSettingsScalarFieldEnum = {
  notificationsettingid: 'notificationsettingid',
  userid: 'userid',
  organizationid: 'organizationid',
  notificationmethodid: 'notificationmethodid',
  isenabled: 'isenabled',
  starttime: 'starttime',
  endtime: 'endtime',
  alloweddays: 'alloweddays',
  ipwhitelist: 'ipwhitelist',
  frequency: 'frequency',
  lastnotification: 'lastnotification',
  createddate: 'createddate'
};

exports.Prisma.PV_OrganizationAddressesScalarFieldEnum = {
  orgaddressid: 'orgaddressid',
  organizationid: 'organizationid',
  addressid: 'addressid',
  addresstype: 'addresstype',
  isactive: 'isactive',
  assigneddate: 'assigneddate'
};

exports.Prisma.PV_OrganizationDocumentsScalarFieldEnum = {
  orgDocumentId: 'orgDocumentId',
  documentid: 'documentid',
  organizationId: 'organizationId'
};

exports.Prisma.PV_OrganizationPermissionsScalarFieldEnum = {
  orgpermissionid: 'orgpermissionid',
  organizationid: 'organizationid',
  permissionid: 'permissionid',
  enabled: 'enabled',
  deleted: 'deleted',
  assigneddate: 'assigneddate',
  lastupdate: 'lastupdate',
  checksum: 'checksum'
};

exports.Prisma.PV_OrganizationPerUserScalarFieldEnum = {
  organizationPerUserId: 'organizationPerUserId',
  userId: 'userId',
  organizationId: 'organizationId'
};

exports.Prisma.PV_OrganizationRolesScalarFieldEnum = {
  orgrolemappingid: 'orgrolemappingid',
  organizationid: 'organizationid',
  roleid: 'roleid',
  enabled: 'enabled',
  deleted: 'deleted',
  assigneddate: 'assigneddate',
  lastupdate: 'lastupdate',
  checksum: 'checksum'
};

exports.Prisma.PV_OrganizationsScalarFieldEnum = {
  organizationid: 'organizationid',
  name: 'name',
  description: 'description',
  userid: 'userid',
  createdAt: 'createdAt',
  legalIdentification: 'legalIdentification',
  OrganizationTypeId: 'OrganizationTypeId',
  MinJointVentures: 'MinJointVentures'
};

exports.Prisma.PV_OrganizationTypesScalarFieldEnum = {
  organizationTypeId: 'organizationTypeId',
  name: 'name'
};

exports.Prisma.PV_PaymentScalarFieldEnum = {
  paymentid: 'paymentid',
  amount: 'amount',
  actualamount: 'actualamount',
  result: 'result',
  reference: 'reference',
  auth: 'auth',
  chargetoken: 'chargetoken',
  description: 'description',
  date: 'date',
  checksum: 'checksum',
  moduleid: 'moduleid',
  paymentmethodid: 'paymentmethodid',
  availablemethodid: 'availablemethodid',
  userid: 'userid',
  error: 'error'
};

exports.Prisma.PV_PaymentMethodsScalarFieldEnum = {
  paymentmethodid: 'paymentmethodid',
  name: 'name',
  APIURL: 'APIURL',
  secretkey: 'secretkey',
  key: 'key',
  logoiconurl: 'logoiconurl',
  enabled: 'enabled'
};

exports.Prisma.PV_periodicVerificationScalarFieldEnum = {
  periodicVerificationId: 'periodicVerificationId',
  scheduleId: 'scheduleId',
  lastupdated: 'lastupdated',
  enabled: 'enabled'
};

exports.Prisma.PV_PermissionsScalarFieldEnum = {
  permissionid: 'permissionid',
  description: 'description',
  code: 'code',
  moduleid: 'moduleid'
};

exports.Prisma.PV_PopulationSegmentsScalarFieldEnum = {
  segmentid: 'segmentid',
  name: 'name',
  description: 'description',
  segmenttypeid: 'segmenttypeid'
};

exports.Prisma.PV_ProjectMonitoringScalarFieldEnum = {
  monitoringid: 'monitoringid',
  proposalid: 'proposalid',
  reportedby: 'reportedby',
  reportdate: 'reportdate',
  reporttypeId: 'reporttypeId',
  description: 'description',
  evidence: 'evidence',
  statusid: 'statusid',
  reviewedby: 'reviewedby',
  reviewdate: 'reviewdate',
  executionPlanId: 'executionPlanId'
};

exports.Prisma.PV_proposalCommentDocumentsScalarFieldEnum = {
  Id: 'Id',
  documentId: 'documentId',
  commentId: 'commentId'
};

exports.Prisma.PV_ProposalCommentsScalarFieldEnum = {
  commentid: 'commentid',
  proposalid: 'proposalid',
  userid: 'userid',
  comment: 'comment',
  commentdate: 'commentdate',
  statusid: 'statusid',
  reviewedby: 'reviewedby',
  reviewdate: 'reviewdate'
};

exports.Prisma.PV_ProposalDocumentsScalarFieldEnum = {
  proposalDocumentId: 'proposalDocumentId',
  proposalid: 'proposalid',
  documenthash: 'documenthash',
  documentId: 'documentId',
  createdDate: 'createdDate'
};

exports.Prisma.PV_ProposalRequirementsScalarFieldEnum = {
  requirementid: 'requirementid',
  proposaltypeid: 'proposaltypeid',
  requirementtypeid: 'requirementtypeid',
  fieldname: 'fieldname',
  isrequired: 'isrequired',
  minlength: 'minlength',
  maxlength: 'maxlength',
  datatype: 'datatype',
  validationrule: 'validationrule'
};

exports.Prisma.PV_ProposalRequirementTypesScalarFieldEnum = {
  requirementtypeid: 'requirementtypeid',
  name: 'name',
  description: 'description'
};

exports.Prisma.PV_ProposalRequirementValuesScalarFieldEnum = {
  valuekey: 'valuekey',
  proposalid: 'proposalid',
  requirementid: 'requirementid',
  textvalue: 'textvalue',
  numbervalue: 'numbervalue',
  datevalue: 'datevalue',
  filevalue: 'filevalue'
};

exports.Prisma.PV_ProposalsScalarFieldEnum = {
  proposalid: 'proposalid',
  title: 'title',
  description: 'description',
  proposalcontent: 'proposalcontent',
  budget: 'budget',
  createdby: 'createdby',
  createdon: 'createdon',
  lastmodified: 'lastmodified',
  proposaltypeid: 'proposaltypeid',
  statusid: 'statusid',
  organizationid: 'organizationid',
  checksum: 'checksum',
  version: 'version'
};

exports.Prisma.PV_ProposalStatusScalarFieldEnum = {
  statusid: 'statusid',
  name: 'name',
  description: 'description'
};

exports.Prisma.PV_ProposalTypesScalarFieldEnum = {
  proposaltypeid: 'proposaltypeid',
  name: 'name',
  description: 'description',
  requiresgovernmentapproval: 'requiresgovernmentapproval',
  requiresvalidatorapproval: 'requiresvalidatorapproval',
  validatorcount: 'validatorcount'
};

exports.Prisma.PV_ProposalVersionsScalarFieldEnum = {
  versionid: 'versionid',
  proposalid: 'proposalid',
  versionnumber: 'versionnumber',
  title: 'title',
  description: 'description',
  proposalcontent: 'proposalcontent',
  budget: 'budget',
  createdby: 'createdby',
  createdon: 'createdon',
  isactive: 'isactive',
  changecomments: 'changecomments',
  checksum: 'checksum'
};

exports.Prisma.PV_ProposasalCommentStatusScalarFieldEnum = {
  statusCommentId: 'statusCommentId',
  status: 'status'
};

exports.Prisma.PV_questionTypeScalarFieldEnum = {
  questionTypeId: 'questionTypeId',
  type: 'type'
};

exports.Prisma.PV_RecurrencyTypeScalarFieldEnum = {
  recurrencytypeid: 'recurrencytypeid',
  name: 'name'
};

exports.Prisma.PV_ReportTypesScalarFieldEnum = {
  reportTypeId: 'reportTypeId',
  name: 'name'
};

exports.Prisma.PV_RolePermissionsScalarFieldEnum = {
  rolepermissionid: 'rolepermissionid',
  enabled: 'enabled',
  deleted: 'deleted',
  lastupdate: 'lastupdate',
  checksum: 'checksum',
  roleid: 'roleid',
  permissionid: 'permissionid'
};

exports.Prisma.PV_RolesScalarFieldEnum = {
  roleid: 'roleid',
  name: 'name'
};

exports.Prisma.PV_SchedulesScalarFieldEnum = {
  scheduleid: 'scheduleid',
  name: 'name',
  repetitions: 'repetitions',
  enddate: 'enddate',
  recurrencytypeid: 'recurrencytypeid',
  endtypeid: 'endtypeid'
};

exports.Prisma.PV_SegmentTypesScalarFieldEnum = {
  segmenttypeid: 'segmenttypeid',
  name: 'name',
  description: 'description'
};

exports.Prisma.PV_StatesScalarFieldEnum = {
  stateid: 'stateid',
  name: 'name',
  countryid: 'countryid'
};

exports.Prisma.PV_TransactionsScalarFieldEnum = {
  transactionid: 'transactionid',
  amount: 'amount',
  description: 'description',
  date: 'date',
  posttime: 'posttime',
  reference1: 'reference1',
  reference2: 'reference2',
  value1: 'value1',
  value2: 'value2',
  processmanagerid: 'processmanagerid',
  convertedamount: 'convertedamount',
  checksum: 'checksum',
  transtypeid: 'transtypeid',
  transsubtypeid: 'transsubtypeid',
  paymentid: 'paymentid',
  currencyid: 'currencyid',
  exchangerateid: 'exchangerateid',
  scheduleid: 'scheduleid',
  balanceid: 'balanceid',
  fundid: 'fundid'
};

exports.Prisma.PV_TranslationScalarFieldEnum = {
  translationid: 'translationid',
  code: 'code',
  caption: 'caption',
  enabled: 'enabled',
  languageid: 'languageid',
  moduleid: 'moduleid'
};

exports.Prisma.PV_TransSubTypesScalarFieldEnum = {
  transsubtypeid: 'transsubtypeid',
  name: 'name'
};

exports.Prisma.PV_TransTypeScalarFieldEnum = {
  transtypeid: 'transtypeid',
  name: 'name'
};

exports.Prisma.PV_TypesPerOrganizationScalarFieldEnum = {
  TypesPerOrganizationId: 'TypesPerOrganizationId',
  organizationId: 'organizationId',
  OrganizationTypeId: 'OrganizationTypeId'
};

exports.Prisma.PV_UserAddressesScalarFieldEnum = {
  useraddressid: 'useraddressid',
  userid: 'userid',
  addressid: 'addressid',
  addresstype: 'addresstype',
  isactive: 'isactive',
  assigneddate: 'assigneddate'
};

exports.Prisma.PV_UserDocumentsScalarFieldEnum = {
  userDocumentId: 'userDocumentId',
  documentid: 'documentid',
  userId: 'userId',
  createdDate: 'createdDate'
};

exports.Prisma.PV_UserPermissionsScalarFieldEnum = {
  userpermissionid: 'userpermissionid',
  enabled: 'enabled',
  deleted: 'deleted',
  lastupdate: 'lastupdate',
  checksum: 'checksum',
  userid: 'userid',
  permissionid: 'permissionid'
};

exports.Prisma.PV_UserRolesScalarFieldEnum = {
  userroleid: 'userroleid',
  userid: 'userid',
  roleid: 'roleid',
  lastupdate: 'lastupdate',
  checksum: 'checksum',
  enabled: 'enabled',
  deleted: 'deleted'
};

exports.Prisma.PV_UsersScalarFieldEnum = {
  userid: 'userid',
  email: 'email',
  firstname: 'firstname',
  lastname: 'lastname',
  birthdate: 'birthdate',
  createdAt: 'createdAt',
  genderId: 'genderId',
  lastupdate: 'lastupdate',
  dni: 'dni',
  userStatusId: 'userStatusId'
};

exports.Prisma.PV_UserSegmentsScalarFieldEnum = {
  usersegmentid: 'usersegmentid',
  userid: 'userid',
  segmentid: 'segmentid',
  assigneddate: 'assigneddate',
  isactive: 'isactive'
};

exports.Prisma.PV_UserStatusScalarFieldEnum = {
  userStatusId: 'userStatusId',
  active: 'active',
  verified: 'verified'
};

exports.Prisma.PV_ValidationRulesScalarFieldEnum = {
  validationruleid: 'validationruleid',
  proposaltypeid: 'proposaltypeid',
  fieldname: 'fieldname',
  ruletype: 'ruletype',
  rulevalue: 'rulevalue',
  errormessage: 'errormessage'
};

exports.Prisma.PV_VoteResultsScalarFieldEnum = {
  resultid: 'resultid',
  votingconfigid: 'votingconfigid',
  optionid: 'optionid',
  votecount: 'votecount',
  weightedcount: 'weightedcount',
  lastupdated: 'lastupdated',
  creationDate: 'creationDate',
  checksum: 'checksum'
};

exports.Prisma.PV_VoterRegistryScalarFieldEnum = {
  registryid: 'registryid',
  votingconfigid: 'votingconfigid',
  userid: 'userid',
  votercommitment: 'votercommitment',
  registrationdate: 'registrationdate',
  hasVoted: 'hasVoted'
};

exports.Prisma.PV_VotesScalarFieldEnum = {
  voteid: 'voteid',
  votingconfigid: 'votingconfigid',
  votercommitment: 'votercommitment',
  encryptedvote: 'encryptedvote',
  votehash: 'votehash',
  nullifierhash: 'nullifierhash',
  votedate: 'votedate',
  blockhash: 'blockhash',
  merkleproof: 'merkleproof',
  blockchainId: 'blockchainId',
  checksum: 'checksum',
  userId: 'userId',
  publicResult: 'publicResult'
};

exports.Prisma.PV_VotingConfigurationsScalarFieldEnum = {
  votingconfigid: 'votingconfigid',
  proposalid: 'proposalid',
  startdate: 'startdate',
  enddate: 'enddate',
  votingtypeId: 'votingtypeId',
  allowweightedvotes: 'allowweightedvotes',
  requiresallvoters: 'requiresallvoters',
  notificationmethodid: 'notificationmethodid',
  userid: 'userid',
  configureddate: 'configureddate',
  statusid: 'statusid',
  publisheddate: 'publisheddate',
  finalizeddate: 'finalizeddate',
  publicVoting: 'publicVoting',
  checksum: 'checksum'
};

exports.Prisma.PV_VotingMetricsScalarFieldEnum = {
  metricid: 'metricid',
  votingconfigid: 'votingconfigid',
  metrictypeId: 'metrictypeId',
  metricvalue: 'metricvalue',
  segmentid: 'segmentid',
  calculateddate: 'calculateddate',
  isactive: 'isactive'
};

exports.Prisma.PV_VotingMetricsTypeScalarFieldEnum = {
  VotingMetricTypeId: 'VotingMetricTypeId',
  name: 'name'
};

exports.Prisma.PV_VotingOptionsScalarFieldEnum = {
  optionid: 'optionid',
  votingconfigid: 'votingconfigid',
  optiontext: 'optiontext',
  optionorder: 'optionorder',
  questionId: 'questionId',
  mediafileId: 'mediafileId',
  checksum: 'checksum'
};

exports.Prisma.PV_VotingQuestionsScalarFieldEnum = {
  questionId: 'questionId',
  question: 'question',
  questionTypeId: 'questionTypeId',
  createdDate: 'createdDate',
  checksum: 'checksum'
};

exports.Prisma.PV_VotingStatusScalarFieldEnum = {
  statusid: 'statusid',
  name: 'name',
  description: 'description'
};

exports.Prisma.PV_VotingTargetSegmentsScalarFieldEnum = {
  targetsegmentid: 'targetsegmentid',
  votingconfigid: 'votingconfigid',
  segmentid: 'segmentid',
  voteweight: 'voteweight',
  assigneddate: 'assigneddate'
};

exports.Prisma.PV_VotingTypesScalarFieldEnum = {
  votingTypeId: 'votingTypeId',
  name: 'name'
};

exports.Prisma.PV_workflowsScalarFieldEnum = {
  workflowId: 'workflowId',
  name: 'name',
  description: 'description',
  endpoint: 'endpoint',
  workflowTypeId: 'workflowTypeId',
  params: 'params'
};

exports.Prisma.PV_workflowsTypeScalarFieldEnum = {
  workflowTypeId: 'workflowTypeId',
  name: 'name'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  flyway_schema_history: 'flyway_schema_history',
  PV_Addresses: 'PV_Addresses',
  PV_AIAnalysisType: 'PV_AIAnalysisType',
  PV_AIConnections: 'PV_AIConnections',
  PV_AIDocumentAnalysis: 'PV_AIDocumentAnalysis',
  PV_AIModels: 'PV_AIModels',
  PV_AIModelTypes: 'PV_AIModelTypes',
  PV_AIProposalAnalysis: 'PV_AIProposalAnalysis',
  PV_AIProviders: 'PV_AIProviders',
  PV_AllowedCountries: 'PV_AllowedCountries',
  PV_AllowedIPs: 'PV_AllowedIPs',
  PV_AuthPlatforms: 'PV_AuthPlatforms',
  PV_authSession: 'PV_authSession',
  PV_AvailableMethods: 'PV_AvailableMethods',
  PV_Balances: 'PV_Balances',
  PV_blockchain: 'PV_blockchain',
  PV_BlockChainConnections: 'PV_BlockChainConnections',
  PV_BlockchainParams: 'PV_BlockchainParams',
  PV_Cities: 'PV_Cities',
  PV_Countries: 'PV_Countries',
  PV_CryptoKeys: 'PV_CryptoKeys',
  PV_Currency: 'PV_Currency',
  PV_Documents: 'PV_Documents',
  PV_DocumentSections: 'PV_DocumentSections',
  PV_DocumentTypes: 'PV_DocumentTypes',
  PV_EndType: 'PV_EndType',
  PV_ExchangeRate: 'PV_ExchangeRate',
  PV_ExecutionPlans: 'PV_ExecutionPlans',
  PV_executionPlanSteps: 'PV_executionPlanSteps',
  PV_executionStepType: 'PV_executionStepType',
  PV_FinancialReports: 'PV_FinancialReports',
  PV_Funds: 'PV_Funds',
  PV_Genders: 'PV_Genders',
  PV_IdentityOrganizationValidation: 'PV_IdentityOrganizationValidation',
  PV_IdentityUserValidation: 'PV_IdentityUserValidation',
  PV_IdentityValidations: 'PV_IdentityValidations',
  PV_InvestmentAgreements: 'PV_InvestmentAgreements',
  PV_Investments: 'PV_Investments',
  PV_investmentSteps: 'PV_investmentSteps',
  PV_Languages: 'PV_Languages',
  PV_Logs: 'PV_Logs',
  PV_LogSeverity: 'PV_LogSeverity',
  PV_LogSource: 'PV_LogSource',
  PV_LogTypes: 'PV_LogTypes',
  PV_mediafiles: 'PV_mediafiles',
  PV_mediaTypes: 'PV_mediaTypes',
  PV_MFA: 'PV_MFA',
  PV_MFAMethods: 'PV_MFAMethods',
  PV_Modules: 'PV_Modules',
  PV_NotificationMethods: 'PV_NotificationMethods',
  PV_NotificationSettings: 'PV_NotificationSettings',
  PV_OrganizationAddresses: 'PV_OrganizationAddresses',
  PV_OrganizationDocuments: 'PV_OrganizationDocuments',
  PV_OrganizationPermissions: 'PV_OrganizationPermissions',
  PV_OrganizationPerUser: 'PV_OrganizationPerUser',
  PV_OrganizationRoles: 'PV_OrganizationRoles',
  PV_Organizations: 'PV_Organizations',
  PV_OrganizationTypes: 'PV_OrganizationTypes',
  PV_Payment: 'PV_Payment',
  PV_PaymentMethods: 'PV_PaymentMethods',
  PV_periodicVerification: 'PV_periodicVerification',
  PV_Permissions: 'PV_Permissions',
  PV_PopulationSegments: 'PV_PopulationSegments',
  PV_ProjectMonitoring: 'PV_ProjectMonitoring',
  PV_proposalCommentDocuments: 'PV_proposalCommentDocuments',
  PV_ProposalComments: 'PV_ProposalComments',
  PV_ProposalDocuments: 'PV_ProposalDocuments',
  PV_ProposalRequirements: 'PV_ProposalRequirements',
  PV_ProposalRequirementTypes: 'PV_ProposalRequirementTypes',
  PV_ProposalRequirementValues: 'PV_ProposalRequirementValues',
  PV_Proposals: 'PV_Proposals',
  PV_ProposalStatus: 'PV_ProposalStatus',
  PV_ProposalTypes: 'PV_ProposalTypes',
  PV_ProposalVersions: 'PV_ProposalVersions',
  PV_ProposasalCommentStatus: 'PV_ProposasalCommentStatus',
  PV_questionType: 'PV_questionType',
  PV_RecurrencyType: 'PV_RecurrencyType',
  PV_ReportTypes: 'PV_ReportTypes',
  PV_RolePermissions: 'PV_RolePermissions',
  PV_Roles: 'PV_Roles',
  PV_Schedules: 'PV_Schedules',
  PV_SegmentTypes: 'PV_SegmentTypes',
  PV_States: 'PV_States',
  PV_Transactions: 'PV_Transactions',
  PV_Translation: 'PV_Translation',
  PV_TransSubTypes: 'PV_TransSubTypes',
  PV_TransType: 'PV_TransType',
  PV_TypesPerOrganization: 'PV_TypesPerOrganization',
  PV_UserAddresses: 'PV_UserAddresses',
  PV_UserDocuments: 'PV_UserDocuments',
  PV_UserPermissions: 'PV_UserPermissions',
  PV_UserRoles: 'PV_UserRoles',
  PV_Users: 'PV_Users',
  PV_UserSegments: 'PV_UserSegments',
  PV_UserStatus: 'PV_UserStatus',
  PV_ValidationRules: 'PV_ValidationRules',
  PV_VoteResults: 'PV_VoteResults',
  PV_VoterRegistry: 'PV_VoterRegistry',
  PV_Votes: 'PV_Votes',
  PV_VotingConfigurations: 'PV_VotingConfigurations',
  PV_VotingMetrics: 'PV_VotingMetrics',
  PV_VotingMetricsType: 'PV_VotingMetricsType',
  PV_VotingOptions: 'PV_VotingOptions',
  PV_VotingQuestions: 'PV_VotingQuestions',
  PV_VotingStatus: 'PV_VotingStatus',
  PV_VotingTargetSegments: 'PV_VotingTargetSegments',
  PV_VotingTypes: 'PV_VotingTypes',
  PV_workflows: 'PV_workflows',
  PV_workflowsType: 'PV_workflowsType'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
