/**
 * Script de pruebas para los endpoints de Stored Procedures
 * Prueba los endpoints de inversi√≥n y reparto de dividendos
 */

const axios = require('axios');

// Configuraci√≥n base
const BASE_URL = 'http://localhost:3000/api/stored-procedures';

async function testStoredProceduresEndpoints() {
  console.log('üß™ Iniciando pruebas de endpoints Stored Procedures');
  console.log('=' .repeat(80));

  try {
    // ===== TEST 1: INVERSI√ìN EN PROPUESTA =====
    console.log('\nüìà TEST 1: Inversi√≥n en Propuesta (PV_InvertirEnPropuesta)');
    console.log('-'.repeat(60));

    // Test 1a: Obtener informaci√≥n de inversiones existentes
    console.log('\n1a. Obteniendo informaci√≥n de inversiones para propuesta 1...');
    try {
      const infoResponse = await axios.get(`${BASE_URL}/invertirEnPropuesta?proposalid=1`);
      console.log('   ‚úÖ Informaci√≥n obtenida exitosamente');
      console.log(`   üìä Total inversiones: ${infoResponse.data.data.investments.length}`);
      console.log(`   üí∞ Propuesta budget: $${infoResponse.data.data.proposal?.budget || 'N/A'}`);
      console.log(`   üíµ Total invertido: $${infoResponse.data.data.proposal?.totalInvested || 0}`);
      console.log(`   üéØ Disponible para inversi√≥n: $${infoResponse.data.data.summary.availableForInvestment}`);
    } catch (error) {
      console.log(`   ‚ùå Error: ${error.response?.data?.error || error.message}`);
    }

    // Test 1b: Realizar nueva inversi√≥n
    console.log('\n1b. Realizando nueva inversi√≥n...');
    const inversionData = {
      proposalid: 1,
      userid: 2, // Usuario diferente para evitar conflictos
      amount: 5000.00,
      investmentdate: new Date().toISOString(),
      paymentmethodid: 1,
      availablemethodid: 1,
      currencyid: 1,
      exchangerateid: 1
    };

    try {
      const inversionResponse = await axios.post(`${BASE_URL}/invertirEnPropuesta`, inversionData);
      console.log('   ‚úÖ Inversi√≥n procesada exitosamente');
      console.log(`   üí∞ Monto invertido: $${inversionResponse.data.data.amount}`);
      console.log(`   üè¶ Adelanto inicial: $${inversionResponse.data.data.details.adelantoInicial}`);
      console.log(`   üìä Tramos creados: ${inversionResponse.data.data.details.tramosCreados}`);
      console.log(`   üó≥Ô∏è Votaciones fiscalizaci√≥n: ${inversionResponse.data.data.details.votacionesFiscalizacion}`);
    } catch (error) {
      console.log(`   ‚ùå Error: ${error.response?.data?.error || error.message}`);
      if (error.response?.data?.details) {
        console.log(`   üìù Detalles: ${error.response.data.details}`);
      }
    }

    // Test 1c: Validaci√≥n de campos requeridos
    console.log('\n1c. Probando validaci√≥n de campos requeridos...');
    const inversionIncompleta = {
      proposalid: 1,
      userid: 2,
      // Faltan campos requeridos
    };

    try {
      await axios.post(`${BASE_URL}/invertirEnPropuesta`, inversionIncompleta);
    } catch (error) {
      if (error.response?.status === 400) {
        console.log('   ‚úÖ Validaci√≥n correcta de campos requeridos');
        console.log(`   üìù Errores: ${error.response.data.details?.join(', ')}`);
      }
    }

    // Test 1d: Inversi√≥n con monto inv√°lido
    console.log('\n1d. Probando inversi√≥n con monto inv√°lido...');
    const inversionInvalida = {
      ...inversionData,
      amount: -1000 // Monto negativo
    };

    try {
      await axios.post(`${BASE_URL}/invertirEnPropuesta`, inversionInvalida);
    } catch (error) {
      if (error.response?.status === 400) {
        console.log('   ‚úÖ Validaci√≥n correcta de monto inv√°lido');
        console.log(`   Error: ${error.response.data.error}`);
      }
    }

    // ===== TEST 2: REPARTO DE DIVIDENDOS =====
    console.log('\n\nüí∞ TEST 2: Reparto de Dividendos (sp_PV_RepartirDividendos)');
    console.log('-'.repeat(60));

    // Test 2a: Obtener informaci√≥n de dividendos disponibles
    console.log('\n2a. Obteniendo informaci√≥n de dividendos para propuesta 1...');
    try {
      const dividendosResponse = await axios.get(`${BASE_URL}/repartirDividendos?proposalid=1`);
      console.log('   ‚úÖ Informaci√≥n de dividendos obtenida exitosamente');
      console.log(`   üíµ Total dividendos disponibles: $${dividendosResponse.data.data.proposal.totalDividendosDisponibles}`);
      console.log(`   üë• Total inversionistas: ${dividendosResponse.data.data.resumen.totalInversionistas}`);
      console.log(`   üìä Equity total asignado: ${dividendosResponse.data.data.resumen.totalEquityAllocated}%`);
      console.log(`   ‚ö†Ô∏è Inversores sin medio pago: ${dividendosResponse.data.data.resumen.inversoresSinMedioPago}`);
      console.log(`   ‚úÖ Disponible para reparto: ${dividendosResponse.data.data.resumen.disponibleParaReparto ? 'S√≠' : 'No'}`);
      
      if (dividendosResponse.data.data.inversionistas.length > 0) {
        console.log('\n   üìã Inversionistas registrados:');
        dividendosResponse.data.data.inversionistas.forEach(inv => {
          console.log(`      - ${inv.investorName}: ${inv.equitypercentage}% ($${inv.potentialDividend} potencial)`);
        });
      }
    } catch (error) {
      console.log(`   ‚ùå Error: ${error.response?.data?.error || error.message}`);
    }

    // Test 2b: Procesar reparto de dividendos (solo si hay datos disponibles)
    console.log('\n2b. Procesando reparto de dividendos...');
    const repartoData = {
      proposalid: 1,
      processedby: 1, // Usuario administrador
      paymentmethodid: 1,
      availablemethodid: 1,
      currencyid: 1,
      exchangerateid: 1
    };

    try {
      const repartoResponse = await axios.post(`${BASE_URL}/repartirDividendos`, repartoData);
      console.log('   ‚úÖ Reparto de dividendos procesado exitosamente');
      console.log(`   üë• Pagos realizados: ${repartoResponse.data.data.details.pagosRealizados}`);
      console.log(`   üí∞ Total repartido: $${repartoResponse.data.data.details.totalRepartido}`);
      console.log(`   üìÖ Procesado en: ${new Date(repartoResponse.data.data.processedAt).toLocaleString()}`);
    } catch (error) {
      console.log(`   ‚ùå Error: ${error.response?.data?.error || error.message}`);
      if (error.response?.data?.details) {
        console.log(`   üìù Detalles: ${error.response.data.details}`);
      }
    }

    // Test 2c: Validaci√≥n de campos requeridos para dividendos
    console.log('\n2c. Probando validaci√≥n de campos requeridos para dividendos...');
    const repartoIncompleto = {
      proposalid: 1,
      // Faltan campos requeridos
    };

    try {
      await axios.post(`${BASE_URL}/repartirDividendos`, repartoIncompleto);
    } catch (error) {
      if (error.response?.status === 400) {
        console.log('   ‚úÖ Validaci√≥n correcta de campos requeridos');
        console.log(`   üìù Errores: ${error.response.data.details?.join(', ')}`);
      }
    }

    // Test 2d: Usuario sin permisos
    console.log('\n2d. Probando reparto con usuario sin permisos...');
    const repartoSinPermisos = {
      ...repartoData,
      processedby: 999 // Usuario inexistente/sin permisos
    };

    try {
      await axios.post(`${BASE_URL}/repartirDividendos`, repartoSinPermisos);
    } catch (error) {
      if (error.response?.status === 403) {
        console.log('   ‚úÖ Validaci√≥n correcta de permisos');
        console.log(`   Error: ${error.response.data.error}`);
      }
    }

    // ===== TEST 3: M√âTODOS NO PERMITIDOS =====
    console.log('\n\n‚ö†Ô∏è  TEST 3: M√©todos HTTP no permitidos');
    console.log('-'.repeat(60));

    // Test 3a: PUT en inversi√≥n
    console.log('\n3a. Probando m√©todo PUT en inversi√≥n...');
    try {
      await axios.put(`${BASE_URL}/invertirEnPropuesta`, {});
    } catch (error) {
      if (error.response?.status === 405) {
        console.log('   ‚úÖ M√©todo PUT correctamente rechazado');
        console.log(`   M√©todos permitidos: ${error.response.data.allowedMethods?.join(', ')}`);
      }
    }

    // Test 3b: DELETE en dividendos
    console.log('\n3b. Probando m√©todo DELETE en dividendos...');
    try {
      await axios.delete(`${BASE_URL}/repartirDividendos`);
    } catch (error) {
      if (error.response?.status === 405) {
        console.log('   ‚úÖ M√©todo DELETE correctamente rechazado');
        console.log(`   M√©todos permitidos: ${error.response.data.allowedMethods?.join(', ')}`);
      }
    }

    console.log('\nüéâ Pruebas de endpoints Stored Procedures completadas!');
    console.log('=' .repeat(80));

  } catch (error) {
    console.error('\nüí• Error general en las pruebas:', error.message);
  }
}

// Funci√≥n auxiliar para mostrar resumen de conexi√≥n
async function mostrarInfoConexion() {
  console.log('üîó Informaci√≥n de conexi√≥n:');
  console.log(`   Base URL: ${BASE_URL}`);
  console.log(`   Endpoints disponibles:`);
  console.log(`   - POST ${BASE_URL}/invertirEnPropuesta`);
  console.log(`   - GET  ${BASE_URL}/invertirEnPropuesta?proposalid=<id>&userid=<id>`);
  console.log(`   - POST ${BASE_URL}/repartirDividendos`);
  console.log(`   - GET  ${BASE_URL}/repartirDividendos?proposalid=<id>&reportid=<id>`);
  console.log('');
}

// Ejecutar pruebas
async function main() {
  await mostrarInfoConexion();
  await testStoredProceduresEndpoints();
}

// Manejar errores no capturados
process.on('unhandledRejection', (error) => {
  console.error('üí• Error no manejado:', error.message);
  process.exit(1);
});

// Ejecutar si se llama directamente
if (require.main === module) {
  main().catch(console.error);
}

module.exports = { testStoredProceduresEndpoints };
