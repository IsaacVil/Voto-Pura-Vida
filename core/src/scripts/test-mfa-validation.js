/**
 * Script de prueba para validar las funciones MFA implementadas
 * Este script prueba espec√≠ficamente la validaci√≥n MFA en el endpoint de votar
 */

const axios = require('axios');
const speakeasy = require('speakeasy');

const BASE_URL = 'http://localhost:3000/api';

// Configuraci√≥n para pruebas
const TEST_CONFIG = {
  userid: 1,
  proposalid: 1,
  optionid: 1,
  questionid: 1,
  biometricData: JSON.stringify({
    type: 'facial',
    data: 'sample_biometric_data',
    confidence: 0.95
  })
};

/**
 * Probar validaci√≥n TOTP
 */
async function testTOTPValidation() {
  console.log('\n=== PRUEBA DE VALIDACI√ìN TOTP ===');
  
  try {
    // Generar un secreto TOTP de prueba
    const secret = speakeasy.generateSecret({
      name: 'VotoPuraVida Test',
      length: 32
    });
    
    console.log(`Secret TOTP generado: ${secret.base32}`);
    
    // Generar c√≥digo TOTP v√°lido
    const validToken = speakeasy.totp({
      secret: secret.base32,
      encoding: 'base32'
    });
    
    console.log(`C√≥digo TOTP v√°lido generado: ${validToken}`);
    
    // Test 1: C√≥digo TOTP v√°lido (simulado)
    const testData = {
      ...TEST_CONFIG,
      mfaToken: 'totp_token',
      mfaCode: validToken
    };
    
    console.log('Enviando solicitud con c√≥digo TOTP v√°lido...');
    const response = await axios.post(`${BASE_URL}/orm/votar`, testData);
    console.log('‚úÖ Respuesta:', response.status, response.data?.success ? 'SUCCESS' : 'ERROR');
    
  } catch (error) {
    if (error.response) {
      console.log(`üìã Status: ${error.response.status}`);
      console.log(`üìã Error: ${error.response.data.error}`);
      
      // Verificar si el error es por MFA (esperado en entorno de prueba)
      if (error.response.data.error?.includes('MFA') || 
          error.response.data.error?.includes('TOTP') ||
          error.response.status === 401) {
        console.log('‚úÖ Validaci√≥n MFA funcionando correctamente');
      }
    } else {
      console.error('‚ùå Error de conexi√≥n:', error.message);
    }
  }
}

/**
 * Probar validaci√≥n SMS
 */
async function testSMSValidation() {
  console.log('\n=== PRUEBA DE VALIDACI√ìN SMS ===');
  
  try {
    const testData = {
      ...TEST_CONFIG,
      mfaToken: 'sms_token_12345',
      mfaCode: '123456'
    };
    
    console.log('Enviando solicitud con c√≥digo SMS...');
    const response = await axios.post(`${BASE_URL}/orm/votar`, testData);
    console.log('‚úÖ Respuesta:', response.status, response.data?.success ? 'SUCCESS' : 'ERROR');
    
  } catch (error) {
    if (error.response) {
      console.log(`üìã Status: ${error.response.status}`);
      console.log(`üìã Error: ${error.response.data.error}`);
      
      if (error.response.data.error?.includes('MFA') || 
          error.response.data.error?.includes('SMS') ||
          error.response.status === 401) {
        console.log('‚úÖ Validaci√≥n SMS funcionando correctamente');
      }
    } else {
      console.error('‚ùå Error de conexi√≥n:', error.message);
    }
  }
}

/**
 * Probar validaci√≥n Email
 */
async function testEmailValidation() {
  console.log('\n=== PRUEBA DE VALIDACI√ìN EMAIL ===');
  
  try {
    const testData = {
      ...TEST_CONFIG,
      mfaToken: 'email_token_67890',
      mfaCode: '654321'
    };
    
    console.log('Enviando solicitud con c√≥digo Email...');
    const response = await axios.post(`${BASE_URL}/orm/votar`, testData);
    console.log('‚úÖ Respuesta:', response.status, response.data?.success ? 'SUCCESS' : 'ERROR');
    
  } catch (error) {
    if (error.response) {
      console.log(`üìã Status: ${error.response.status}`);
      console.log(`üìã Error: ${error.response.data.error}`);
      
      if (error.response.data.error?.includes('MFA') || 
          error.response.data.error?.includes('EMAIL') ||
          error.response.status === 401) {
        console.log('‚úÖ Validaci√≥n Email funcionando correctamente');
      }
    } else {
      console.error('‚ùå Error de conexi√≥n:', error.message);
    }
  }
}

/**
 * Probar c√≥digos MFA inv√°lidos
 */
async function testInvalidMFA() {
  console.log('\n=== PRUEBA DE C√ìDIGOS MFA INV√ÅLIDOS ===');
  
  const invalidCodes = [
    { code: '123', desc: 'muy corto' },
    { code: '1234567', desc: 'muy largo' },
    { code: 'abcdef', desc: 'no num√©rico' },
    { code: '', desc: 'vac√≠o' }
  ];
  
  for (const invalid of invalidCodes) {
    try {
      console.log(`\nProbando c√≥digo ${invalid.desc}: "${invalid.code}"`);
      
      const testData = {
        ...TEST_CONFIG,
        mfaToken: 'test_token',
        mfaCode: invalid.code
      };
      
      const response = await axios.post(`${BASE_URL}/orm/votar`, testData);
      console.log('‚ùå No deber√≠a haber aceptado el c√≥digo:', response.status);
      
    } catch (error) {
      if (error.response?.status === 400 || error.response?.status === 401) {
        console.log(`‚úÖ Correctamente rechazado c√≥digo ${invalid.desc}`);
      } else {
        console.log(`üìã Error: ${error.response?.data?.error || error.message}`);
      }
    }
  }
}

/**
 * Verificar que el endpoint de health funciona
 */
async function testHealthEndpoint() {
  console.log('\n=== PRUEBA DE HEALTH ENDPOINT ===');
  
  try {
    const response = await axios.get(`${BASE_URL}/orm/health`);
    console.log('‚úÖ Health endpoint funcionando:', response.data);
  } catch (error) {
    console.error('‚ùå Error en health endpoint:', error.message);
  }
}

/**
 * Funci√≥n principal de pruebas
 */
async function runMFATests() {
  console.log('üîê INICIANDO PRUEBAS DE VALIDACI√ìN MFA');
  console.log('=======================================');
  
  try {
    // Verificar que el servidor est√© funcionando
    await testHealthEndpoint();
    
    // Probar diferentes m√©todos MFA
    await testTOTPValidation();
    await testSMSValidation();
    await testEmailValidation();
    
    // Probar c√≥digos inv√°lidos
    await testInvalidMFA();
    
    console.log('\n‚úÖ TODAS LAS PRUEBAS MFA COMPLETADAS');
    console.log('=======================================');
    
  } catch (error) {
    console.error('‚ùå Error general en las pruebas:', error.message);
  }
}

// Ejecutar pruebas si el script se ejecuta directamente
if (require.main === module) {
  runMFATests().catch(console.error);
}

module.exports = { runMFATests };
